#
#  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
#  SPDX-License-Identifier: Apache-2.0
#
Parameters:
  Ec2ImageId:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2

Resources:
  # # Internal ALB
  # InternalALB:
  #   Type: AWS::ElasticLoadBalancingV2::LoadBalancer
  #   Properties: 
  #     # LoadBalancerAttributes: 
  #     #   - LoadBalancerAttribute
  #     Name: keycloak-internal-alb
  #     Scheme: internal
  #     SecurityGroups: 
  #       - !Ref InternalALBSecurityGroup
  #     Subnets: 
  #       - !Ref KeyCloakPrivateSubnetA
  #       - !Ref KeyCloakPrivateSubnetB
  #     Tags: 
  #       - Key: Name
  #         Value: keycloak-internal-alb
  #     Type: application
  
  # InternalALBTargetGroup:
  #   Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
  #   Properties:
  #     VpcId: !Ref VPC
  #     Name: InternalALBTargetGroup
  #     Protocol: HTTP
  #     Port: 8080
  #     TargetType: ip
  
  # InternalALBListner:
  #   Type: "AWS::ElasticLoadBalancingV2::Listener"
  #   Properties:
  #     DefaultActions:
  #       - TargetGroupArn: !Ref InternalALBTargetGroup
  #         Type: forward
  #     LoadBalancerArn: !Ref InternalALB
  #     Port: 8080
  #     Protocol: HTTP

  # # Security Group for Private API GW's VPC Endpoint 
  # InternalALBSecurityGroup:
  #   Type: AWS::EC2::SecurityGroup
  #   Properties:
  #     GroupDescription: InternalALBSecurityGroup
  #     VpcId: !Ref VPC
  #     Tags:
  #       - Key: Name
  #         Value: InternalALBSecurityGroup
  #     SecurityGroupIngress:
  #       - IpProtocol: tcp
  #         FromPort: 8080
  #         ToPort: 8080
  #         CidrIp: 11.0.0.0/16

  # Generate Keycloak's credentials
  KeycloakSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: Keycloak Secrets
      GenerateSecretString:
        SecretStringTemplate: '{"username": "keycloak"}'
        GenerateStringKey: password
        PasswordLength: 32

  # IAM Role for Keycloak Instance
  KeycloakInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: KeycloakRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
  
  KeycloakConfigAccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: KeycloakConfigAccessPolicy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action: "s3:GetObject"
          Resource:
            - "arn:aws:s3:::keycloak-sample-bucket/*"
      Roles:
      - !Ref KeycloakInstanceRole

  KeycloakInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - Ref: KeycloakInstanceRole
      InstanceProfileName: KeycloakInstanceProfile

  # VPC Endpoint for S3
  S3GatewayEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal: "*"
            Action:
              - s3:GetObject
            Resource:
              - "arn:aws:s3:::keycloak-sample-bucket/*"
      ServiceName: !Sub com.amazonaws.${AWS::Region}.s3
      RouteTableIds:
        - !Ref KeycloakPrivateRouteTable
      VpcEndpointType: Gateway
      VpcId: !Ref VPC

  # Keycloak EC2 Instances
  KeycloakEC2InstanceA:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref Ec2ImageId
      InstanceType: t3.medium
      SubnetId: !Ref KeycloakPrivateSubnetA
      SecurityGroupIds:
        - !Ref EC2SecurityGroup
      IamInstanceProfile: !Ref EC2InstanceProfile
      UserData:
        Fn::Base64: !Sub |
          #!/bin/sh -ex
          exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
          yum update -y
          yum install docker -y
          yum install jq -y
          service docker start
          systemctl enable docker.service
          AWS_REGION=${AWS::Region}
          SECRET_ID=${KeycloakSecret}
          echo {!AWS_REGION}
          KEYCLOAK_USER=$(aws secretsmanager get-secret-value --region ${!AWS_REGION} --secret-id ${!SECRET_ID} | jq -r '.SecretString' | jq '.username')
          KEYCLOAK_PASSWORD=$(aws secretsmanager get-secret-value --region ${!AWS_REGION} --secret-id ${!SECRET_ID} | jq -r '.SecretString' | jq '.password')
          aws s3 cp s3://keycloak-sample-bucket/realm-export.json /tmp/realm-export.json
          docker run -d -p 8080:8080 -e PROXY_ADDRESS_FORWARDING=true -e KEYCLOAK_ADMIN_USER=${!KEYCLOAK_USER} -e KEYCLOAK_ADMIN_PASSWORD=${!KEYCLOAK_PASSWORD} -e KEYCLOAK_IMPORT=/tmp/realm-export.json -v /tmp/realm-export.json:/tmp/realm-export.json jboss/keycloak:16.0.0
      Tags:
        - Key: Name
          Value: Keycloak Instance


      