#
#  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
#  SPDX-License-Identifier: Apache-2.0
#

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 11.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: FHIR Dev VPC

  # Private Subnets for VPN
  VpnPrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: 11.0.10.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: Private Subnet A for VPN connection
  
  VpnPrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: 11.0.11.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: Private Subnet B for VPN connection

  # Private Subnets for ElasticSearch Service
  S3PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: 11.0.20.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: Private Subnet A for ES
  
  S3PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: 11.0.21.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: Private Subnet B for ES
  
  # Private Subnets for API Gw
  ApiGwPrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: 11.0.30.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: Private Subnet A for ApiGw
  
  ApiGwPrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: 11.0.31.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: Private Subnet B for ApiGw
  
  # Private Subnets for Keycloak
  KeycloakPrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: 11.0.40.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: Private Subnet A for Keycloak
  
  KeycloakPrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: 11.0.41.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: Private Subnet B for Keycloak
  
  # # NAT Gateway
  # NatGatewayAEIP:
  #   Type: AWS::EC2::EIP
  #   DependsOn: InternetGatewayAttachment
  #   Properties:
  #     Domain: vpc
  
  # NatGatewayBEIP:
  #   Type: AWS::EC2::EIP
  #   DependsOn: InternetGatewayAttachment
  #   Properties:
  #     Domain: vpc

  # NatGatewayA:
  #   Type: AWS::EC2::NatGateway
  #   Properties:
  #     AllocationId: !GetAtt NatGatewayAEIP.AllocationId
  #     SubnetId: !Ref PublicSubnetA
  
  # NatGatewayB:
  #   Type: AWS::EC2::NatGateway
  #   Properties:
  #     AllocationId: !GetAtt NatGatewayBEIP.AllocationId
  #     SubnetId: !Ref PublicSubnetB
  
  # # Public Subnet's Route Table
  # PublicRouteTable:
  #   Type: AWS::EC2::RouteTable
  #   Properties:
  #     VpcId: !Ref VPC
  #     Tags:
  #       - Key: Name
  #         Value: Public Routes

  # DefaultPublicRoute:
  #   Type: AWS::EC2::Route
  #   DependsOn: InternetGatewayAttachment
  #   Properties:
  #     RouteTableId: !Ref PublicRouteTable
  #     DestinationCidrBlock: 0.0.0.0/0
  #     GatewayId: !Ref InternetGateway

  # PublicSubnetARouteTableAssociation:
  #   Type: AWS::EC2::SubnetRouteTableAssociation
  #   Properties:
  #     RouteTableId: !Ref PublicRouteTable
  #     SubnetId: !Ref PublicSubnetA
  
  # PublicSubnetBRouteTableAssociation:
  #   Type: AWS::EC2::SubnetRouteTableAssociation
  #   Properties:
  #     RouteTableId: !Ref PublicRouteTable
  #     SubnetId: !Ref PublicSubnetB
  
  # Private Subnet's Route Table
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub Private Routes

  VpnPrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref VpnPrivateSubnetA
  
  VpnPrivateSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref VpnPrivateSubnetB
  
  S3PrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref S3PrivateSubnetA
  
  S3PrivateSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref S3PrivateSubnetB

  ApiGwPrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref ApiGwPrivateSubnetA
  
  ApiGwPrivateSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref ApiGwPrivateSubnetB

  # Security Group for VPC Endpoint 
  EndpointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: EndpointSecurityGroup
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: EndpointSecurityGroup
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 11.0.0.0/16
  
  # # Endpoint for Systems Manager
  # EndpointSSM:
  #   Type: AWS::EC2::VPCEndpoint
  #   Properties:
  #     PrivateDnsEnabled: true
  #     SecurityGroupIds:
  #       - !Ref EndpointSecurityGroup
  #     ServiceName: !Sub com.amazonaws.${AWS::Region}.ssm
  #     SubnetIds:
  #       - !Ref KeycloakPrivateSubnetA
  #     VpcEndpointType: Interface
  #     VpcId: !Ref VPC

  # EndpointSSMMessages:
  #   Type: AWS::EC2::VPCEndpoint
  #   Properties:
  #     PrivateDnsEnabled: true
  #     SecurityGroupIds:
  #       - !Ref EndpointSecurityGroup
  #     ServiceName: !Sub com.amazonaws.${AWS::Region}.ssmmessages
  #     SubnetIds:
  #       - !Ref KeycloakPrivateSubnetA
  #     VpcEndpointType: Interface
  #     VpcId: !Ref VPC

  # EndpointEC2Messages:
  #   Type: AWS::EC2::VPCEndpoint
  #   Properties:
  #     PrivateDnsEnabled: true
  #     SecurityGroupIds:
  #       - !Ref EndpointSecurityGroup
  #     ServiceName: !Sub com.amazonaws.${AWS::Region}.ec2messages
  #     SubnetIds:
  #       - !Ref KeycloakPrivateSubnetA
  #     VpcEndpointType: Interface
  #     VpcId: !Ref VPC
  
  # # IAM Role for SSM
  # EC2IAMRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     RoleName: !Sub SSM-role
  #     AssumeRolePolicyDocument:
  #       Version: '2012-10-17'
  #       Statement:
  #         - Effect: Allow
  #           Principal:
  #             Service:
  #               - ec2.amazonaws.com
  #           Action:
  #             - sts:AssumeRole
  #     Path: /
  #     ManagedPolicyArns:
  #       - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

  # VPC Endpoint for Private API GW
  EndpointPrivateAPIGW:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PrivateDnsEnabled: false
      SecurityGroupIds:
        - !Ref EndpointSecurityGroup
      ServiceName: !Sub com.amazonaws.${AWS::Region}.execute-api
      SubnetIds:
        - !Ref ApiGwPrivateSubnetA
        - !Ref ApiGwPrivateSubnetB
      VpcEndpointType: Interface
      VpcId: !Ref VPC


  # Client VPN Endpoint
  ClientVpnEndpoint: 
    Type: AWS::EC2::ClientVpnEndpoint
    Properties:
      Description: "Client VPN Endpoint"
      AuthenticationOptions: 
        - Type: certificate-authentication
          MutualAuthentication:
            ClientRootCertificateChainArn: arn:aws:acm:us-west-2:823715351041:certificate/a3096ed7-4c60-4ea0-8b40-eca732985eda
      ClientCidrBlock: 100.64.0.0/22
      ConnectionLogOptions: 
        Enabled: true
        CloudwatchLogGroup: /aws/clientvpn
        CloudwatchLogStream: connection-log
      ServerCertificateArn: arn:aws:acm:us-west-2:823715351041:certificate/87b9db24-6faa-4c85-be53-532c098c9133
      SplitTunnel: false
      VpcId: !Ref VPC

  # Association to Client VPC Endpoint
  VpnNetworkAssociationA:
      Type: AWS::EC2::ClientVpnTargetNetworkAssociation
      Properties:
        ClientVpnEndpointId: !Ref ClientVpnEndpoint
        SubnetId: !Ref VpnPrivateSubnetA
  VpnNetworkAssociationB:
    Type: AWS::EC2::ClientVpnTargetNetworkAssociation
    Properties:
      ClientVpnEndpointId: !Ref ClientVpnEndpoint
      SubnetId: !Ref VpnPrivateSubnetB
  
  # VpnAuthzRule
  VpnAuthRule:
    Type: "AWS::EC2::ClientVpnAuthorizationRule"
    Properties:
      ClientVpnEndpointId: !Ref ClientVpnEndpoint
      AuthorizeAllGroups: true
      TargetNetworkCidr: 11.0.0.0/16
  

  # VPC Endpoint for S3 
  S3VpcEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PrivateDnsEnabled: false
      SecurityGroupIds:
        - !Ref EndpointSecurityGroup
      ServiceName: !Sub com.amazonaws.${AWS::Region}.s3
      SubnetIds:
        - !Ref S3PrivateSubnetA
        - !Ref S3PrivateSubnetB
      VpcEndpointType: Interface
      VpcId: !Ref VPC

